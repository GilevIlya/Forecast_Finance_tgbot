from aiogram import Router, F
from aiogram.filters import  Command
from aiogram.types import Message, CallbackQuery
from app.keyboards import currency_keyboard, keyboard_of_abil, stop_operation
from app.database import validation, save_currency, daily_count

import aiohttp
import asyncio

router1 = Router()

translate = {
    'USD': 'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê',
    'EUR': 'üá™üá∫ –ï–≤—Ä–æ',
    'CZK': 'üá®üáø –ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞',
    'PLN': 'üáµüá± –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π',
    'MDL': 'üá≤üá© –ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π',
    'AZN': 'üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç',
    'RON': 'üá∑üá¥ –†—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π',
    'UAH': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞'
}


@router1.message(Command('currency'))
async def currency(message: Message):
    count = await validation(message.from_user.id, 'currency_count')
    if count is None:
        count = 0
    if count >= 10:
        await message.answer("–£–ø—Å üòÖ, –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. \n"
                            "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–Ω–æ–≤–∞!")
        return
    user_curr = await validation(message.from_user.id, 'currency')
    if user_curr is None:
        await message.answer(f'–í—ã –µ—â—ë –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤–∞–ª—é—Ç—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫—É—ÄcüòÖ', reply_markup=stop_operation)
        await message.answer('üí±–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞–ª—é—Ç –Ω–∏–∂–µ:', reply_markup=currency_keyboard)
    else:
        result = await currency_get_inf(user_curr)
        for item in range(len(result)):
            result[item][0]['txt'] = translate[result[item][0]['cc']]
        answer_to_bot = await currency_answer_creating(result, user_curr)
        await message.answer("\n".join(answer_to_bot))
        await daily_count(message.from_user.id, 'currency_count')
        attempts = 9-count
        if attempts == 0:
            await message.answer(f"üí± –û—Å—Ç–∞–ª–æ—Å—å {attempts} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–µ–≥–æ–¥–Ω—è.\n"
                                "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòä")
        else:
            await message.answer(f"üí± –û—Å—Ç–∞–ª–æ—Å—å {attempts} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å–µ–≥–æ–¥–Ω—è.")

@router1.message(Command('change_currency'))
async def change_currency(message: Message):
    current_currency = await validation(message.from_user.id, 'currency')
    if current_currency is None:
        await currency(message)
    else:
        await message.answer(f"üåü –í–∞—à–∞ –≤–∞–ª—é—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {translate[str(current_currency)]}/{current_currency}\n", reply_markup=stop_operation)
        await message.answer(f'üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –Ω–∏–∂–µ: ', reply_markup=currency_keyboard)

@router1.callback_query(F.data.startswith('cur'))
async def reg_currency(callback: CallbackQuery):
    try:
        _, currency_name = callback.data.split(':')
        await save_currency(callback.from_user.id, currency_name)
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(text=f'üî•–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –≤–∞–ª—é—Ç–∞ {translate[currency_name]}/{currency_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', 
                                      reply_markup=keyboard_of_abil)
    except:
        await callback.answer('Error')

async def fetch_currency(session, valcode):
    url = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json"
    params = {"valcode":valcode}
    async with session.get(url, params=params) as response:
        return await response.json()


async def currency_get_inf(user_curr):
    list_of_currency = ['USD', 'EUR', 'CZK', 'PLN', 'MDL', 'AZN', 'RON']
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_currency(session, item) for item in list_of_currency]
        results = await asyncio.gather(*tasks)
        results.append([{'r030': 0, 'txt': '', 'rate': 1, 'cc': 'UAH'}])
        return results
    
async def currency_answer_creating(currencies, user_curr):
    found = next((lst for lst in currencies if lst[0].get('cc') == user_curr), None)
    text = [f'–í–∞—à–∞ –≤–∞–ª—é—Ç–∞üíµ: {found[0]['txt']}/{found[0]['cc']}',
            f'üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:']
    
    for item in currencies:
        if item[0]['cc'] != str(user_curr):
            calc = round(item[0]['rate']/found[0]['rate'], 4)
            text.append(
                f'1 {item[0]['cc']} = {calc} {user_curr} üí∞'
            )
    return text