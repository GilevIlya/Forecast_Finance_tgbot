from aiogram import Router, F, Bot
from aiogram.filters import  Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.keyboards import build_city_keyboard, keyboard_of_abil, stop_operation
from app.database import save_city_and_coords, validation, registration, daily_count 
from app.handlers.currency import currency
from config import API_KEY, ADMIN_ID, ADMIN_USER_NAME, TOKEN
from datetime import datetime

import aiohttp
import json

bot = Bot(token=TOKEN)
router = Router()

###################################################################
# INDEPENDENT COMMAND "/help"
@router.message(Command('help'))
async def help(message: Message):
    await message.answer(
        "ü§ñ <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç <b>Forecast&Finance</b> üå¶üí∏\n"
        "–ü–æ–º–æ–≥–∞—é —É–∑–Ω–∞–≤–∞—Ç—å <b>–ø–æ–≥–æ–¥—É</b> –∏ <b>–∫—É—Ä—Å—ã –≤–∞–ª—é—Ç</b>.\n\n"

        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /weather ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "‚Ä¢ /change_city ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåç\n"
        "‚Ä¢ /currency ‚Äî –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üí±\n"
        "‚Ä¢ /change_currency ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É üí∞\n"
        "‚Ä¢ /help ‚Äî –ø–æ–º–æ—â—å\n\n"

        "üìä <b>–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞:</b>\n"
        "üåç –ì–æ—Ä–æ–¥: –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å, US\n"
        "üå° –¢–µ–º–ø: 21.5¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ 21.2¬∞C)\n"
        "üìâ –ú–∏–Ω: 20.0¬∞C / –ú–∞–∫—Å: 22.7¬∞C\n"
        "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: –Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å\n"
        "üí® –í–µ—Ç–µ—Ä: 6.7 –º/—Å\n"
        "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: 57%\n"
        "üåÖ –í–æ—Å—Ö–æ–¥: 16:56 | üåá –ó–∞–∫–∞—Ç: 04:21\n\n"

        "üí± <b>–ü—Ä–∏–º–µ—Ä –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:</b>\n"
        "–í–∞—à–∞ –≤–∞–ª—é—Ç–∞: üá∫üá¶ –ì—Ä–∏–≤–Ω–∞ (UAH)\n"
        "1 USD = 41.61 UAH\n"
        "1 EUR = 48.13 UAH\n"
        "1 PLN = 11.29 UAH\n"
        "1 CZK = 1.98 UAH\n"
        "1 MDL = 2.46 UAH\n"
        "1 AZN = 24.48 UAH\n"
        "1 RON = 9.46 UAH\n\n"

        f"üì® –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @{ADMIN_USER_NAME}"
        , parse_mode="HTML"
    )

# INDEPENDENT COMMAND "/help"
###################################################################




# COMMANDS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ
# COMMANDS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ
# COMMANDS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ

@router.message(Command('start'))
async def reg_user(message: Message):
    if await validation(message.from_user.id, 'id') is None:
        await registration(message.from_user.id, 
                           message.from_user.first_name, 
                           message.from_user.username)
        await bot.send_message(ADMIN_ID, 
                               f'New user!\n'
                               f'id: {message.from_user.id}\n'
                               f'first_name: {message.from_user.first_name}\n'
                               f'user_name: {message.from_user.username}')
        await bot.session.close()
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n"
                            "\n"
                            "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ üå¶ –ø–æ–≥–æ–¥–µ –∏ üí± –≤–∞–ª—é—Ç–∞–º.\n"
                            "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
                            "\n"
                            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                            "/weather ‚Äì —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ\n"
                            '/weatherweek - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ\n'
                            "/currency ‚Äì –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (USD, EUR, PLN)\n"
                            "/help ‚Äì –ø–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π")
    else:
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!\n"
                            "\n"
                            "–Ø —Å–ª–µ–∂—É –∑–∞ üå¶ –ø–æ–≥–æ–¥–æ–π –∏ üí± –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç,\n"
                            "—á—Ç–æ–±—ã —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ —Å–≤–µ–∂–∞—è –∏–Ω—Ñ–∞ –ø–æ–¥ —Ä—É–∫–æ–π\n"
                            '\n'
                            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                            "/weather ‚Äì —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ\n"
                            '/weatherweek - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ\n'
                            "/change_city - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã\n"  
                            "/currency ‚Äì –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (USD, EUR, PLN)\n"
                            "/change_currency - –∏–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É\n"  
                            "/help ‚Äì –ø–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π")


@router.message(F.text.in_(['/weather_week', '/weather']))
async def weather_forecast(message: Message, state: FSMContext):
    weather = {'/weather_week': 
                {'validkey': 'weatherweek_daily_count',
                'count': 'weatherweek_daily_count',
                'limit': 3},

                '/weather':
                {'validkey': 'weather_daily_count',
                'count': 'weather_daily_count',
                'limit': 10}}
    if message.text == 'üå¶ –ü–æ–≥–æ–¥–∞':
        key = '/weather'
    elif message.text == '‚òÄÔ∏è–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π':
        key = '/weather_week'
    else:
        key = message.text
    limit = weather[key]['limit']
    attempts_fromdb = await validation(message.from_user.id, weather[key]['validkey'])
    if attempts_fromdb >= limit:
        await (message.answer("üå§ –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –≤—Å—ë –≤—ã—è—Å–Ω–∏–ª–∏ –ø—Ä–æ –Ω—ã–Ω–µ—à–Ω—é—é –ø–æ–≥–æ–¥—Éüòä\n"
                    "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞, —É–∑–Ω–∞–µ–º, —á—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç –Ω–µ–±–æ!")if key == '/weather' else message.answer(
                              "üå§ –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –≤—Å—ë –≤—ã—è—Å–Ω–∏–ª–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–πüòä\n"
                    "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞, —É–∑–Ω–∞–µ–º, —á—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç –Ω–µ–±–æ!"
                    ))
        return
    if await validation(message.from_user.id, 'cityandcoords') is None:
        await message.answer("‚ùå –£–ø—Å, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å.\n"  
                            "–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üåÜ, –∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —è —Å–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –æ–¥–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º!")
        await state.set_state(Register.city)
    else:
        await message.answer('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
        city = await validation(message.from_user.id, 'cityandcoords')
        result = await (get_weatherweek(city) if key == '/weather_week' else get_weather(city))
        await (message.answer("\n".join(result)) if key == '/weather_week' else message.answer(result))
        await daily_count(message.from_user.id, weather[key]['count'])
        attempts = (limit-1)-attempts_fromdb
        if attempts != 0:
            await (message.answer(f'‚òÅÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {attempts} –∑–∞–ø—Ä–æ—Å(–æ–≤) —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π —Å–µ–≥–æ–¥–Ω—è!\n'
                                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Å —É–º–æ–º üòä")if key == '/weatherweek' else message.answer(
                                  f'‚òÅÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {attempts} –∑–∞–ø—Ä–æ—Å(–æ–≤) —É–∑–Ω–∞—Ç—å –Ω—ã–Ω–µ—à–Ω—é—é –ø–æ–≥–æ–¥—É —Å–µ–≥–æ–¥–Ω—è!\n'
                                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Å —É–º–æ–º üòä"))
        else:
            await (message.answer(f'‚òÅÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {attempts} –∑–∞–ø—Ä–æ—Å(–æ–≤) —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π —Å–µ–≥–æ–¥–Ω—è!\n'
                            "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòä") if key == '/weatherweek' else message.answer(
                                 f'‚òÅÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {attempts} –∑–∞–ø—Ä–æ—Å(–æ–≤) —É–∑–Ω–∞—Ç—å –Ω—ã–Ω–µ—à–Ω—é—é –ø–æ–≥–æ–¥—É —Å–µ–≥–æ–¥–Ω—è!\n'
                            "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üòä"
                            ))


@router.message(Command('change_city'))
async def change_city(message:Message, state:FSMContext):
    current_city = await validation(message.from_user.id, 'cityandcoords')
    if current_city is None:
        await message.answer("‚ùå –£–ø—Å, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å.\n"  
                            "–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üåÜ, –∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —è —Å–º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –æ–¥–Ω–∏–º –¥–≤–∏–∂–µ–Ω–∏–µ–º!")
        await state.set_state(Register.city)
    else:
        city_data = json.loads(current_city)
        city = str(city_data['city'])
        await message.answer(f'üè¢ –í–∞—à –Ω—ã–Ω–µ—à–Ω–∏–π –≥–æ—Ä–æ–¥: {city}\n'
                        'üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥, –∏ —è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É—é—Å—å —Ç—É–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã!', reply_markup=stop_operation)
        await state.set_state(Register.city)


@router.message(F.text.in_(['üå¶ –ü–æ–≥–æ–¥–∞', '‚òÄÔ∏è–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π',
                            'üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üõë–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é']))
async def back_to_mwc(message:Message, state:FSMContext):
    if message.text == 'üå¶ –ü–æ–≥–æ–¥–∞' or message.text == '‚òÄÔ∏è–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π':
        await weather_forecast(message, state) 
    elif message.text == 'üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç':
        await currency(message)
    elif message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await reg_user(message)    
    elif message.text == 'üõë–ü—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é':
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞", reply_markup=None)
        await reg_user(message)

#COMMANDSüîºüîºüîºüîºüîºüîºüîºüîºüîºüîº
#COMMANDSüîºüîºüîºüîºüîºüîºüîºüîºüîºüîº
#COMMANDSüîºüîºüîºüîºüîºüîºüîºüîºüîºüîº




# CALLBACKS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ
# CALLBACKS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ
# CALLBACKS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ

@router.callback_query(F.data.startswith('set_city'))
async def location(callback:CallbackQuery, state:FSMContext):
    try:
        _, lat, lon, city_name = callback.data.split(":")
        json_for_db = {'city': city_name,
                       'lat': lat,
                       'lon': lon}
        await save_city_and_coords(callback.from_user.id, json_for_db)
        await callback.message.edit_text(text="ü•≥–£—Å–ø–µ—à–Ω–æ!",reply_markup=None)
        await callback.message.answer(text='üî•–¢–µ–ø–µ—Ä—å –≤–∞—à –≥–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', reply_markup=keyboard_of_abil)
    finally:
        await state.clear()

#CALLBACKSüîºüîºüîºüîºüîºüîºüîºüîºüîºüîº
#CALLBACKSüîºüîºüîºüîºüîºüîºüîºüîºüîºüîº
#CALLBACKSüîºüîºüîºüîºüîºüîºüîºüîºüîºüîº




class Register(StatesGroup):
    city = State()

@router.message(Register.city)
async def reg(message: Message, state:FSMContext):
    city = message.text
    if city[0] == '/':
        await message.answer('Enter the city name, not command/–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–µ –∫–æ–º–∞–Ω–¥—É')
        return
    if len(city) > 50:
        await message.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ')
        await message.answer('üåç–£–∫–∞–∂–∏ —Å–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥,\n'
                            "—á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:")
        return
    try:
        cities = await find_city(city)
        keyboard = await build_city_keyboard(cities)
        await message.answer('üåç–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö: ', reply_markup=keyboard)
    except Exception:
        await message.answer('No such city')
    finally:
        await state.clear()




# WEATHER_FUNCTIONS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ
# WEATHER_FUNCTIONS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ
# WEATHER_FUNCTIONS üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ

async def get_weather(city):
    url = 'https://api.openweathermap.org/data/2.5/weather'
    try:
        data = await get_weather_forecast(url, city)
        sunset = datetime.fromtimestamp(data[-1]).strftime("%H:%M")
        sunrise = datetime.fromtimestamp(data[-2]).strftime("%H:%M")
        return (f"üåç –ì–æ—Ä–æ–¥: {data[0]}, {data[1]}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data[4]}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {data[5]}¬∞C)\n"
        f'üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {data[2]}¬∞C / –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {data[3]}¬∞C\n'
        f'‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {data[6]}\n'
        f'üí® –í–µ—Ç–µ—Ä: {data[8]} –º/—Å\n'
        f'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data[10]}%\n'
        f'‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {data[12]}%\n'
        f'üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise}\n üåá –ó–∞–∫–∞—Ç: {sunset}'
        )
    except Exception as ex:
        print(ex)
        return 'Error, No such key'


async def get_weatherweek(city):
    url = 'https://api.openweathermap.org/data/2.5/forecast'
    try:
        data_dict = await get_weatherweek_forecast(url, city)
        result = [f'üåç –ì–æ—Ä–æ–¥: {data_dict['location'][0]}, {data_dict['location'][1]}\n'
                  f'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ']
        for key, value in data_dict.items():
            if key == 'location':
                break
            days_ru = {
                "Monday": "–ü–Ω",
                "Tuesday": "–í—Ç",
                "Wednesday": "–°—Ä",
                "Thursday": "–ß—Ç",
                "Friday": "–ü—Ç",
                "Saturday": "–°–±",
                "Sunday": "–í—Å",}
            
            months_ru = {
                1: "–Ø–Ω–≤–∞—Ä—è", 2: "–§–µ–≤—Ä–∞–ª—è", 3: "–ú–∞—Ä—Ç–∞", 4: "–ê–ø—Ä–µ–ª—è",
                5: "–ú–∞—è", 6: "–ò—é–Ω—è", 7: "–ò—é–ª—è", 8: "–ê–≤–≥—É—Å—Ç–∞",
                9: "–°–µ–Ω—Ç—è–±—Ä—è", 10: "–û–∫—Ç—è–±—Ä—è", 11: "–ù–æ—è–±—Ä—è", 12: "–î–µ–∫–∞–±—Ä—è"}

            date_str = str(key)
            day_str = datetime.strptime(date_str, "%Y-%m-%d")
            month, day = months_ru[day_str.month], day_str.day
            day_name = day_str.strftime('%A')


            result.append(
                        f"üìÖ {days_ru[day_name]}, {day} {month}\n"
                        f"‚Ä¢ üå° –¢–µ–º–ø: {value['main']['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {value['main']['feels_like']}¬∞C)\n"
                        f"‚Ä¢ üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {value['main']['humidity']}%\n"
                        f"‚Ä¢ üå¨ –í–µ—Ç–µ—Ä: {value['wind']['speed']} –º/—Å, ‚Üô {value['wind']['deg']}¬∞\n"
                        f"‚Ä¢ üå§ –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {value['clouds']['all']}%\n"
                        f"‚Ä¢ ‚õÖ –ü–æ–≥–æ–¥–∞: {value['weather'][0]['description']}\n"
                        f"‚Ä¢ üåß –û—Å–∞–¥–∫–∏: {value.get('rain', {}).get('3h', 0)} –º–º\n"
                        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            )
        return result
    except Exception as ex:
        print(ex)
        return 'Error, No such key'
    
    
async def APIrequest(city):
    city_data = json.loads(city)
    name = city_data['city']
    lat = float(city_data['lat'])
    lon = float(city_data['lon'])
    params = {
        "q": name,
        "lat": lat,
        "lon": lon,
        "appid": API_KEY,
        "units": "metric",
        "lang": "ru"
    }
    return params

async def get_weather_forecast(url, city):
    params = await APIrequest(city)
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            if resp.status == 200: 
                inf = [
                    data["name"], 
                    data["sys"]["country"],
                    data["main"]["temp_min"],
                    data["main"]["temp_max"], 
                    data["main"]["temp"],
                    data["main"]["feels_like"],
                    data["weather"][0]["description"],
                    data["weather"][0]["icon"],
                    data["wind"]["speed"],
                    data["wind"].get("deg"),
                    data["main"]["humidity"],
                    data["main"]["pressure"],
                    data.get("clouds", {}).get("all"),
                    data["sys"]["sunrise"],
                    data["sys"]["sunset"]
                ]
                return inf

async def find_city(city_name):
    url = "http://api.openweathermap.org/geo/1.0/direct"
    params = {
        "q": city_name,
        "limit": 5,
        "appid": API_KEY,
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            data = await resp.json()
            cities = [[i.get('local_names', {}).get('ru', i['name']),
                            i['country'], 
                            i.get('state'), 
                            i['lat'], i['lon']] for i in data]
            return cities
        
async def get_weatherweek_forecast(url, city):
    params = await APIrequest(city)
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            data = await response.json()
            dictio = {}
            for i in data['list']:
                date = i['dt_txt'].split()[0]
                dictio[date] = i
            dictio['location'] = [data['city']['name'], data['city']['country']]
            
            return dictio

# WEATHER_FUNCTIONS üîºüîºüîºüîºüîºüîºüîºüîºüîºüîº
# WEATHER_FUNCTIONS üîºüîºüîºüîºüîºüîºüîºüîºüîºüîº
# WEATHER_FUNCTIONS üîºüîºüîºüîºüîºüîºüîºüîºüîºüîº